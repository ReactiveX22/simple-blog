{
  "users": [
    {
      "id": "1",
      "name": "ReactiveX22"
    },
    {
      "id": "2",
      "name": "User02"
    }
  ],
  "posts": [
    {
      "id": "1",
      "title": "My First Post",
      "content": "Hi, I'm ReactiveX22. This is my first post ðŸ˜Š",
      "author": 1
    },
    {
      "id": "2",
      "title": "My Second Post",
      "content": "Hi, I'm ReactiveX22. This is my second post ðŸ˜²",
      "author": 1
    },
    {
      "id": "3",
      "title": "My Third Post",
      "content": "Hi, I'm ReactiveX22. This is my third post ðŸ˜Š",
      "author": 1
    },
    {
      "id": "4",
      "title": "My Fourth Post",
      "content": "Hi, I'm ReactiveX22. This is my Fourth post ðŸ˜²",
      "author": 1
    },
    {
      "title": "My Fifth Post (UPDATED)",
      "content": "Hi, I'm ReactiveX22. This is my Fifth post ðŸ˜²\n\n\nThis is my updated post....",
      "author": 1,
      "id": "5"
    },
    {
      "title": "Testing Markdown ðŸ˜‰ ",
      "content": "# Heading 1\n## Heading 2\n### Heading 3\n\n**bold text**\n\n\n*italicized text* Hello\n\n## Ordered List\n1. First item\n2. Second item\n3. Third item\n\n## Unordered List\n- First item\n- Second item\n- Third item\n\n`code text`\n\n[Link](https://www.google.com/)\n\n## Horizontal Line\n\n---\n\n```javascript\nfunction sum(a, b) {\nreturn a + b;\n}\n```\n\n![cute cat](https://i.pinimg.com/736x/51/c8/5c/51c85c2a96fa169a105f3f5130242be9.jpg 400x300)\n\nHi, I'm ReactiveX22. This is my Sixth post ðŸ˜². Just testing out my API to make sure everything is working fine! I've been experimenting with different technologies lately, trying to enhance my development skills. It's been a great learning experience, and I can't wait to share more updates as I move forward in my projects.\n",
      "author": 1,
      "id": "6"
    },
    {
      "title": "Understanding useEffect in React",
      "content": "In React, the `useEffect` hook is one of the most commonly used hooks. It allows you to perform side effects in functional components. Side effects are operations that are not directly related to rendering the UI, such as fetching data, setting up a subscription, or manually modifying the DOM.\n\n## Basic Syntax\n\nThe basic syntax of `useEffect` looks like this:\n\n```js\nuseEffect(() => {\n  // Side effect code here\n}, [dependencies]);\n```\n\n- The first argument is a function where you place your side effect logic.\n- The second argument is an array of dependencies. The effect will run only when one of these dependencies changes. If you pass an empty array [], the effect will only run once, after the initial render.\n\n## Example: Fetching Data\n\nHere's an example of using `useEffect` to fetch data from an API when a component mounts:\n\n```js\nimport React, { useState, useEffect } from 'react';\n\nconst DataFetchingComponent = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      });\n  }, []); // Empty dependency array means this runs once after the initial render.\n\n  if (loading) return <div>Loading...</div>;\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default DataFetchingComponent;\n```\nIn this example:\n\n- We use useState to keep track of the data and loading state.\n- useEffect fetches data from an API and updates the state when the data is loaded.\n- The empty dependency array [] ensures the effect runs only once, similar to componentDidMount in class components.\n\n## Cleanup with `useEffect`\n\n`useEffect` can also return a cleanup function. This is useful for cleaning up side effects, like cancelling network requests, unsubscribing from a subscription, or clearing timers.\n\nHere's an example of cleaning up a timer:\n\n```js\nimport React, { useState, useEffect } from 'react';\n\nconst TimerComponent = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCount(prevCount => prevCount + 1);\n    }, 1000);\n\n    // Cleanup function to clear the timer\n    return () => clearInterval(timer);\n  }, []); // The effect only runs once when the component mounts.\n\n  return <div>Time: {count} seconds</div>;\n};\n\nexport default TimerComponent;\n```\n\nIn this example:\n\n- We set up an interval timer that increments the count every second.\n- The useEffect returns a cleanup function that clears the interval when the component unmounts, preventing memory leaks.\n\n## Dependency Array\n\nThe second argument of `useEffect`, the dependency array, determines when the effect should re-run. Here are a few common cases:\n\n### 1. No Dependencies (`[]`)\n\nIf the array is empty, the effect runs only once after the initial render, similar to componentDidMount in class components.\n\n### 2. Specific Dependencies\n\nIf you provide a list of dependencies, the effect will run whenever one of them changes.\n\n```js\nuseEffect(() => {\n  console.log('Count has changed:', count);\n}, [count]); // Runs when 'count' changes\n```\n\n### 3. No Dependency Array\n\nIf you don't provide a dependency array, the effect will run after every render, similar to `componentDidUpdate` in class components.\n\n```js\nuseEffect(() => {\n  console.log('This runs on every render');\n});\n```\n\n## Conclusion\n\nThe `useEffect` hook is a powerful tool in React for managing side effects. Whether you're fetching data, setting up subscriptions, or performing cleanups, `useEffect` helps you manage those operations in functional components effectively. By understanding how dependencies work and when to clean up effects, you can keep your components optimized and free from memory leaks.",
      "author": 1,
      "id": "461a374c-6f6f-4fc3-9c0a-965eb59b0162"
    }
  ]
}